#!/bin/bash

# Echo Messages
terminalColorClear='\033[0m'
terminalColorEmphasis='\033[1;32m'
terminalColorError='\033[1;31m'
terminalColorMessage='\033[1;33m'
terminalColorSuccess='\033[1;32m'
terminalColorWarning='\033[1;34m'


echoDefault() {
    echo -e "${terminalColorClear}$1${terminalColorClear}"
}

echoSuccess() {
    echo -e "${terminalColorSuccess}$1${terminalColorClear}"
}

echoMessage() {
    echo -e "${terminalColorMessage}$1${terminalColorClear}"
}
 
echoWarning() {
    echo -e "${terminalColorWarning}$1${terminalColorClear}"
}
 
echoError() {
    echo -e "${terminalColorError}$1${terminalColorClear}"
}

# Get OS information
. /etc/os-release
# Supported OS's and Versions
supported_os=(Ubuntu)
supported_ubuntu=(20.04 22.04)

# Start Functions Section
# Function to verify if value is an integer
f_verify_integer() {
    arg1=$1
    echo "$arg1"|grep "^[0-9]*$"
    arg1="$?"
    if [[ $arg1 == 0 ]]
    then
        return 0
    else
        return 1
    fi
}
# Function to check if string is valid IPV4 address
f_valid_ipv4()
{
    ip=${1:-1.2.3.4}

    re='^(0*(1?[0-9]{1,2}|2([0-4][0-9]|5[0-5]))\.){3}'
    re+='0*(1?[0-9]{1,2}|2([‌​0-4][0-9]|5[0-5]))$'

    if [[ $ip =~ $re ]]; then
        return 0
    else
        return 1
    fi
}
# Function to check if string is a FQDN
f_is_valid_fqdn() {
    $fqdn=$1
    for name in ${fqdn[*]}
    do
        host $name 2>&1 > /dev/null
    if [ $? -eq 0 ]
    then
        return 0
    else
        return 1
    fi
done
}
# Function to change delimeter of array values
f_array_as_del() {
  local IFS="$1"
  shift
  echo "$*"
}

# Function to check if OS and OS Version is supported
f_check_os() {
    os_name=$NAME
    os_version=$VERSION_ID
    if [[ ! " ${supported_os[@]} " =~ " ${os_name} " ]];
    then
        echoError "ERROR: $NAME is not a supported Operating System by this script."
        return 1
    else
        # Check Ubuntu Version
        if [[ " ${supported_os[@]} " =~ "Ubuntu" ]]
        then
            if [[ ! " ${supported_ubuntu[@]} " =~ " ${os_version} " ]];
            then
                echoError "$NAME version $VERSION_ID is not supported by this script"
                echoError "Exiting script."
                echoMessage "OS: $NAME"
                echoMessage "Version: $VERSION_ID"
                echoMessage "Exiting script."
                return 2
                exit 0
            else
                echoSuccess "SUCCESS: $Name $VERSION_ID is supported by this script"
                return 0
            fi
        fi
    fi
}
# Function to install postgresql on Ubuntu 20.04
f_install_postgresql_focal() {
    arg_psql_version=$1
    arg_psql_port=$2
    arg_=$3
    arg4=$4
}

# End Functions Section

# Check if script is being run by root or sudo user
if [ `whoami` != root ]; then
    echoError "ERROR: This script must be run as root user or using sudo"
    exit 0
fi

# Check OS and OS Version are supported
f_check_os

# Get user input for project variables

# Get Postgresql version to install
psql_versions=(12 13 14 15)
echo "What version of postgresql do you want to install"
for version in ${psql_versions[*]}; do
    echo "Version [ $version ]"
done
read input_psql_version
while [[ ! " ${psql_versions[@]} " =~ " ${input_psql_version} " ]]; do
    echo "$input_psql_version is not a supported version.  Please enter one of the following versions and enter only integer value"
    for version in ${psql_versions[*]}; do
        echo "Version [ $version ]"
    done
    read input_psql_version
done

# Get user input for Postgresql configuration variables
echo "Let's configure a few variables for postgresql..."
# Get parameter value for [ max_connections ]
echo "Enter an interger value for max_connections.  E.g. [ 128 ]"
read input_psql_max_connections
while true; do
    if ! f_verify_integer $input_psql_max_connections;
    then
        echo "$input_psql_max_connections is not a valid value for max_connections..."
        echo "Enter an interger value for max_connections.  E.g. [ 128 ]"
        read input_psql_max_connections

    else
        break
    fi
done

# Get parameter value for [ shared_buffers ]
echo "Enter an interger value for shared_buffers in MB.  E.g. [ 512 ]"
read input_psql_shared_buffers
while true; do
    if ! f_verify_integer $input_psql_shared_buffers;
    then
        echo "$input_psql_shared_buffers is not a valid value for shared_buffers..."
        echo "Enter an interger value for shared_buffers.  E.g. [ 512 ]"
        read input_psql_shared_buffers
    else
        break
    fi
done


# Get parameter value for [ listen_addresses ]
psql_listen_addresses_options=(0 1 2 3 4)
echo "Set the listen_addresses variable for postgresql."
echo "Enter the interger value for one of the following options..."
echo "[ 0 ] All IP addresses"
echo "[ 1 ] localhost"
echo "[ 2 ] Any IPV4 address"
echo "[ 3 ] Any IPV6 address"
echo "[ 4 ] Manually enter IPV4/IPV6 addresses"
read input_psql_listen_addresses

while [[ ! " ${psql_listen_addresses_options[@]} " =~ " ${input_psql_listen_addresses} " ]]; do
    echo "$input_psql_listen_addresses is not a valid option.  Please enter the interger value for one of the following options..."
    echo "[ 0 ] All IP addresses"
    echo "[ 1 ] localhost"
    echo "[ 2 ] Any IPV4 address"
    echo "[ 3 ] Any IPV6 address"
    echo "[ 4 ] Manually enter IPV4/IPV6 addresses"
    read input_psql_listen_addresses
done

if [[ "$input_psql_listen_addresses" == 0 ]];
then
    input_psql_listen_addresses_val="*"
    echo "Postgresql listen_addresses will be set to any address [ $input_psql_listen_addresses_val ]"

fi

if [[ "$input_psql_listen_addresses" == 1 ]];
then
    input_psql_listen_addresses_val="localhost"
    echo "Postgresql listen_addresses will be set [ $input_psql_listen_addresses_val ]"   
fi

if [[ "$input_psql_listen_addresses" == 2 ]];
then
    input_psql_listen_addresses_val="0.0.0.0"
    echo "Postgresql listen_addresses will be set for all IPV4 address [ $input_psql_listen_addresses_val ]"
fi

if [[ "$input_psql_listen_addresses" == 3 ]];
then
    input_psql_listen_addresses_val="::"
    echo "Postgresql listen_addresses will be set for all IPV6 address [ $input_psql_listen_addresses_val ]"   
fi

if [[ "$input_psql_listen_addresses" == 4 ]];
then
    echo "How many IP addresses do you need to enter?"
    echo "Please enter an integer value..."
    read input_psql_listen_addresses_num_ips

    while true; do
        if ! f_verify_integer $input_psql_listen_addresses_num_ips;
        then
            echo "$input_psql_listen_addresses_num_ips is not a valid value for number of IPs..."
            echo "Enter an interger value for the number of IPs.  E.g. [ 2 ]"
            read input_psql_listen_addresses_num_ips
        elif [ $input_psql_listen_addresses_num_ips -lt 1 ];
        then
            echo "You must enter at least 1 IP address."
            echo "Enter an interger value for the number of IPs.  E.g. [ 2 ]"
            read input_psql_listen_addresses_num_ips
        else
            break
        fi
    done

    i=$input_psql_listen_addresses_num_ips
    input_psql_listen_addresses_val_list=()
    while [ "$i" -le "$input_psql_listen_addresses_num_ips" ] && [ "$i" -ge 1 ]; do
        echo "Enter IP #$i: "
        read input_psql_listen_addresses_val
        while true; do
            if ! f_valid_ipv4 $input_psql_listen_addresses_val;
            then
                echo "$input_psql_listen_addresses_val is not a valid IPV4/IPV6 address..."
                echo "Please enter a valid IPV4/IPV6 address..."
                read input_psql_listen_addresses_val
            else
                break
            fi
        done
        input_psql_listen_addresses_val_list+=("${input_psql_listen_addresses_val[*]}")
        i=$(( i - 1 ))
    done
    input_psql_listen_addresses_val_list_csv=$(f_array_as_del , ${input_psql_listen_addresses_val_list[*]})
fi



echo ""
echo "Summary:"
echo "This script will install Postgresql version [ $input_psql_version ]"
echo "Postgresql max_connections parameter will be set to [ $input_psql_max_connections ]"
echo "Postgresql shared_buffers parameter will be set to [ $input_psql_shared_buffers ]"
if [[ "$input_psql_listen_addresses" != 4 ]];
then
    echo "Postgresql listen_addresses parameter will be set to [ $input_psql_listen_addresses_val ]"
else
    echo "Postgresql listen_addresses parameter will be set to [ $input_psql_listen_addresses_val_list_csv ]"
fi



